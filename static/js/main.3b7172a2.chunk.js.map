{"version":3,"sources":["components/Card/Card.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","react_default","a","createElement","className","onClick","clickedPeople","id","src","image","alt","name","Score","title","score","topScore","moveBoxes","array","i","length","j","Math","floor","random","_ref","App","state","characters","alert","winning","clickedCharacters","_this","setState","indexOf","push","console","log","handleIncrement","_this2","this","style","opacity","Score_Score","map","Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b7172a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst Cards = props => (\r\n    <div className=\"card\" onClick={() => props.clickedPeople(props.id)}>\r\n        <div className=\"img-container\">\r\n            <img src={props.image} alt={props.name}/>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Cards;","import React from \"react\";\r\nimport \"./score.css\";\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <header className=\"score\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 col-left\"><h5>{props.title}</h5></div>\r\n                <div className=\"col-md-3 col-right\"><h6>High Score {props.score}</h6></div>\r\n                <div className=\"col-md-3 col-right\"><h6> Current Score {props.topScore}</h6></div>\r\n            </div>\r\n            <div className=\"row\">\r\n            <div className=\"col-md-12 col-right\"><h6>Click on GoT character. Don't click on it twice.</h6></div>\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Score;","import React, { Component } from \"react\";\nimport characters from \"./characters.json\";\nimport Cards from \"./components/Card/Card\";\nimport Score from \"./components/Score/Score\";\n\n\n// Boxes shuffle on page\nfunction moveBoxes(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    topScore: 0,\n    alert: 0,\n    winning: 0,\n    clickedCharacters: []\n  };\n\n  clickedPeople = id => {\n    let clickedCharacters = this.state.clickedCharacters;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    this.setState({\n      alert: 0\n    });\n\n    if (clickedCharacters.indexOf(id) === -1) {\n      clickedCharacters.push(id);\n      console.log(clickedCharacters);\n      // Run function\n      this.handleIncrement();\n      // Run moveboxes function\n      this.moveBoxes();\n    } else if (this.state.score === 10) {\n      this.setState({\n        winning: 1,\n        score: 0,\n        clickedCharacters: []\n      });\n      this.setState({\n        score: 0,\n        clickedCharacters: []\n      });\n      this.setState({\n        alert: 1\n      });\n    }\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // move boxes\n  moveBoxes = () => {\n    this.setState({ characters: moveBoxes(characters) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"alert alert-danger\" style={{ opacity: this.state.alert }} >\n        Don't Click it more than once!\n        </div>\n        <div className=\"aler alert-success\" style={{ opacity: this.state.winning }} >\n        Nice! Didn't duplicate any.\n        </div>\n\n        <Score\n          title=\"GoT\"\n          score={this.state.score}\n          topScore={this.state.topScore} \n          />\n        <div className=\"row\">\n          {this.state.characters.map(characters => (\n            <Cards\n            key={characters.id}\n            id={characters.id}\n            name={characters.name}\n            image={characters.image}\n            clickedPeople={this.clickedPeople}\n            />\n          ))}\n            </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}